@page
@model NorthwindApp.Pages.OrderDetailPages.IndexModel
@{
    ViewData["Title"] = "Order details";
}
<div class="mx-auto mt-2">
    <div class="col text-center">
        <h3 class="fw-bold">@ViewData["Title"];</h3>
    </div>
 
</div>


     <table id="example" class="table table-sm table-hover table-striped">
        <thead>
            <tr class="text-center small border border-0 border-bottom border-dark">
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].OrderID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].Product.ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].UnitPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].Quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].Discount)
                </th>
                ADD => (UnityPrice * Quantity * Discount) as Revenue
                <th>
                    @Html.DisplayNameFor(model => model.OrderDetail[0].Customer.CompanyName)
                </th>
                <th>   Action  </th>
            </tr>
        </thead>
        <tbody class="justify-content-center">
            @foreach (var item in Model.OrderDetail)
            {
                <tr class="text-center text-sm-center small">
                    <td>
                        @Html.DisplayFor(modelItem => item.Order.OrderID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Product.ProductName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UnitPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Quantity)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Discount)
                    </td>
                    <th>
                        @Html.DisplayName(item.Customer.CompanyName)
                    </th>
                    <td>
                        <a asp-page="./Details" asp-route-id="@item.OrderID" asp-route-id2="@item.ProductID" class="bi-book-fill mx-3 fs-6" style="accent-color: blue;"></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
 
<canvas id="canvas"></canvas>

@section Scripts {
@*     @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    } *@
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        
        var data = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'Looping tension',
                data: [65, 59, 80, 81, 26, 55, 40],
                fill: false,
                borderColor: 'rgb(75, 192, 192)',
            }]
        };
        options: {
            animations: {
                tension: {
                    duration: 1000,
                    easing: 'linear',
                    from: 1,
                    to: 0,
                    loop: true
                }
            },
            scales: {
                y: { // defining min and max so hiding the dataset does not change scale range
                    min: 0,
                    max: 100
                }
            }
        }


        function onCreated(args) {
            var dashboardObject = document.getElementById("spline").ej2_instances[0];
            var panels =
                [
                    { "sizeX": 1, "sizeY": 1, "row": 0, "col": 0 },
                    { "sizeX": 1, "sizeY": 1, "row": 0, "col": 1 },
                    { "sizeX": 2, "sizeY": 1, "row": 1, "col": 0 }
                ]

            if (ej.base.Browser.isDevice) {
                dashboardObject.panels = panels;
                dashboardObject.columns = 2;
                dashboardObject.cellAspectRatio = 1;

                setTimeout(() => {
                    dashboardObject.refresh();
                }, 100);
            }


        var layoutColor;

        function onPointRender(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'tailwindcss';
        }

        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'tailwindcss';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5'));
        };

        document.addEventListener('DOMContentLoaded', function () {
            var lineObj = document.getElementById('spline').ej2_instances[0];           
            var splineObj = document.getElementById('element').ej2_instances[0];
            lineObj.refresh();        
            splineObj.refresh();
        });

    </script>
}
